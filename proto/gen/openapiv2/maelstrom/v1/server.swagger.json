{
  "swagger": "2.0",
  "info": {
    "title": "maelstrom/v1/server.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Maelstrom"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/cosmos/tx/v1beta1/txs": {
      "post": {
        "summary": "BroadcastTx mimics the gRPC endpoint for the Cosmos SDK's tx service. This allows easier compatibility\nfor clients. They can simply redirect their endpoint to the Maelstrom service and continue submitting\nBlobTxs. Maelstrom will decode them, verify the signer and signature, extract the blobs and aggregate\nthem with others, eventually submitting them to the main chain",
        "operationId": "Maelstrom_BroadcastTx",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BroadcastTxResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BroadcastTxRequest"
            }
          }
        ],
        "tags": [
          "Maelstrom"
        ]
      }
    },
    "/v1/balance/{address}": {
      "get": {
        "summary": "Balance",
        "operationId": "Maelstrom_Balance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Maelstrom"
        ]
      }
    },
    "/v1/cancel": {
      "post": {
        "summary": "Cancel",
        "operationId": "Maelstrom_Cancel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CancelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CancelRequest"
            }
          }
        ],
        "tags": [
          "Maelstrom"
        ]
      }
    },
    "/v1/info": {
      "get": {
        "summary": "Info",
        "operationId": "Maelstrom_Info",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1InfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Maelstrom"
        ]
      }
    },
    "/v1/pending_withdrawal/{address}": {
      "get": {
        "summary": "Pending Withdrawal",
        "operationId": "Maelstrom_PendingWithdrawal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PendingWithdrawalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Maelstrom"
        ]
      }
    },
    "/v1/status/{id}": {
      "get": {
        "summary": "Status",
        "operationId": "Maelstrom_Status",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Maelstrom"
        ]
      }
    },
    "/v1/submit": {
      "post": {
        "summary": "Submit",
        "operationId": "Maelstrom_Submit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SubmitResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SubmitRequest"
            }
          }
        ],
        "tags": [
          "Maelstrom"
        ]
      }
    },
    "/v1/withdraw": {
      "post": {
        "summary": "Withdraw",
        "operationId": "Maelstrom_Withdraw",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1WithdrawResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1WithdrawRequest"
            }
          }
        ],
        "tags": [
          "Maelstrom"
        ]
      }
    }
  },
  "definitions": {
    "abciEvent": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/abciEventAttribute"
          }
        }
      },
      "description": "Event allows application developers to attach additional information to\nResponseFinalizeBlock and ResponseCheckTx.\nLater, transactions may be queried using these events."
    },
    "abciEventAttribute": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "index": {
          "type": "boolean",
          "title": "nondeterministic"
        }
      },
      "description": "EventAttribute is a single key-value pair, associated with an event."
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "v1BalanceResponse": {
      "type": "object",
      "properties": {
        "maelstromBalance": {
          "type": "string",
          "format": "uint64"
        },
        "celestiaBalance": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1BroadcastTxRequest": {
      "type": "object",
      "properties": {
        "txBytes": {
          "type": "string",
          "format": "byte",
          "description": "tx_bytes is the raw transaction."
        }
      },
      "title": "BroadcastTxRequest matches the fields and types of the BroadcastTxRequest\nin the Cosmos SDK"
    },
    "v1BroadcastTxResponse": {
      "type": "object",
      "properties": {
        "txResponse": {
          "$ref": "#/definitions/v1beta1TxResponse"
        },
        "id": {
          "type": "string",
          "format": "uint64",
          "title": "the ID is additional information and relates to the ID\nused to track the status of the blob in maelstrom"
        }
      }
    },
    "v1CancelRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "signature": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1CancelResponse": {
      "type": "object"
    },
    "v1InfoResponse": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "height": {
          "type": "string",
          "format": "uint64"
        },
        "chainId": {
          "type": "string"
        },
        "minGasPrice": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "v1Options": {
      "type": "object",
      "properties": {
        "timeoutBlocks": {
          "type": "string",
          "format": "uint64"
        },
        "compact": {
          "type": "boolean"
        },
        "namespaceVersion": {
          "type": "integer",
          "format": "int64"
        },
        "shareVersion": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1PendingWithdrawalResponse": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1StatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1StatusResponseStatus"
        },
        "insertHeight": {
          "type": "string",
          "format": "uint64",
          "title": "If the tx is pending, these fields will be populated"
        },
        "expiryHeight": {
          "type": "string",
          "format": "uint64"
        },
        "txHash": {
          "type": "string",
          "format": "byte",
          "title": "if the tx is committed, thid field will be populated"
        }
      }
    },
    "v1StatusResponseStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "PENDING",
        "BROADCASTING",
        "COMMITTED",
        "EXPIRED"
      ],
      "default": "UNKNOWN"
    },
    "v1SubmitRequest": {
      "type": "object",
      "properties": {
        "signer": {
          "type": "string"
        },
        "namespace": {
          "type": "string",
          "format": "byte"
        },
        "blobs": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        },
        "fee": {
          "type": "string",
          "format": "uint64"
        },
        "signature": {
          "type": "string",
          "format": "byte"
        },
        "options": {
          "$ref": "#/definitions/v1Options"
        }
      }
    },
    "v1SubmitResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1WithdrawRequest": {
      "type": "object",
      "properties": {
        "signer": {
          "type": "string"
        },
        "balance": {
          "type": "string",
          "format": "uint64"
        },
        "amount": {
          "type": "string",
          "format": "uint64"
        },
        "timestamp": {
          "type": "string",
          "format": "uint64"
        },
        "signature": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1WithdrawResponse": {
      "type": "object"
    },
    "v1beta1ABCIMessageLog": {
      "type": "object",
      "properties": {
        "msgIndex": {
          "type": "integer",
          "format": "int64"
        },
        "log": {
          "type": "string"
        },
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1StringEvent"
          },
          "description": "Events contains a slice of Event objects that were emitted during some\nexecution."
        }
      },
      "description": "ABCIMessageLog defines a structure containing an indexed tx ABCI message log."
    },
    "v1beta1Attribute": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "description": "Attribute defines an attribute wrapper where the key and value are\nstrings instead of raw bytes."
    },
    "v1beta1StringEvent": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1Attribute"
          }
        }
      },
      "description": "StringEvent defines en Event object wrapper where all the attributes\ncontain key/value pairs that are strings instead of raw bytes."
    },
    "v1beta1TxResponse": {
      "type": "object",
      "properties": {
        "height": {
          "type": "string",
          "format": "int64",
          "title": "The block height"
        },
        "txhash": {
          "type": "string",
          "description": "The transaction hash."
        },
        "codespace": {
          "type": "string",
          "title": "Namespace for the Code"
        },
        "code": {
          "type": "integer",
          "format": "int64",
          "description": "Response code."
        },
        "data": {
          "type": "string",
          "description": "Result bytes, if any."
        },
        "rawLog": {
          "type": "string",
          "description": "The output of the application's logger (raw string). May be\nnon-deterministic."
        },
        "logs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1beta1ABCIMessageLog"
          },
          "description": "The output of the application's logger (typed). May be non-deterministic."
        },
        "info": {
          "type": "string",
          "description": "Additional information. May be non-deterministic."
        },
        "gasWanted": {
          "type": "string",
          "format": "int64",
          "description": "Amount of gas requested for transaction."
        },
        "gasUsed": {
          "type": "string",
          "format": "int64",
          "description": "Amount of gas consumed by transaction."
        },
        "tx": {
          "$ref": "#/definitions/protobufAny",
          "description": "The request transaction bytes."
        },
        "timestamp": {
          "type": "string",
          "description": "Time of the previous block. For heights \u003e 1, it's the weighted median of\nthe timestamps of the valid votes in the block.LastCommit. For height == 1,\nit's genesis time."
        },
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/abciEvent"
          },
          "description": "Events defines all the events emitted by processing a transaction. Note,\nthese events include those emitted by processing all the messages and those\nemitted from the ante. Whereas Logs contains the events, with\nadditional metadata, emitted only by processing the messages.\n\nSince: cosmos-sdk 0.42.11, 0.44.5, 0.45"
        }
      },
      "description": "TxResponse defines a structure containing relevant tx data and metadata. The\ntags are stringified and the log is JSON decoded."
    }
  }
}
