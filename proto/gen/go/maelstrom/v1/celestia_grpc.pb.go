// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: maelstrom/v1/celestia.proto

package maelstrom

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Celestia_BroadcastTx_FullMethodName = "/maelstrom.v1.Celestia/BroadcastTx"
)

// CelestiaClient is the client API for Celestia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CelestiaClient interface {
	BroadcastTx(ctx context.Context, in *BroadcastTxRequest, opts ...grpc.CallOption) (*BroadcastTxResponse, error)
}

type celestiaClient struct {
	cc grpc.ClientConnInterface
}

func NewCelestiaClient(cc grpc.ClientConnInterface) CelestiaClient {
	return &celestiaClient{cc}
}

func (c *celestiaClient) BroadcastTx(ctx context.Context, in *BroadcastTxRequest, opts ...grpc.CallOption) (*BroadcastTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastTxResponse)
	err := c.cc.Invoke(ctx, Celestia_BroadcastTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CelestiaServer is the server API for Celestia service.
// All implementations must embed UnimplementedCelestiaServer
// for forward compatibility
type CelestiaServer interface {
	BroadcastTx(context.Context, *BroadcastTxRequest) (*BroadcastTxResponse, error)
	mustEmbedUnimplementedCelestiaServer()
}

// UnimplementedCelestiaServer must be embedded to have forward compatible implementations.
type UnimplementedCelestiaServer struct {
}

func (UnimplementedCelestiaServer) BroadcastTx(context.Context, *BroadcastTxRequest) (*BroadcastTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastTx not implemented")
}
func (UnimplementedCelestiaServer) mustEmbedUnimplementedCelestiaServer() {}

// UnsafeCelestiaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CelestiaServer will
// result in compilation errors.
type UnsafeCelestiaServer interface {
	mustEmbedUnimplementedCelestiaServer()
}

func RegisterCelestiaServer(s grpc.ServiceRegistrar, srv CelestiaServer) {
	s.RegisterService(&Celestia_ServiceDesc, srv)
}

func _Celestia_BroadcastTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CelestiaServer).BroadcastTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Celestia_BroadcastTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CelestiaServer).BroadcastTx(ctx, req.(*BroadcastTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Celestia_ServiceDesc is the grpc.ServiceDesc for Celestia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Celestia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "maelstrom.v1.Celestia",
	HandlerType: (*CelestiaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadcastTx",
			Handler:    _Celestia_BroadcastTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maelstrom/v1/celestia.proto",
}
