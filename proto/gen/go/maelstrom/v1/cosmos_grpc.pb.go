// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: maelstrom/v1/cosmos.proto

package maelstrom

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cosmos_BroadcastTx_FullMethodName = "/maelstrom.v1.Cosmos/BroadcastTx"
)

// CosmosClient is the client API for Cosmos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CosmosClient interface {
	// BroadcastTx mimics the gRPC endpoint for the Cosmos SDK's tx service. This allows easier compatibility
	// for clients. They can simply redirect their endpoint to the Maelstrom service and continue submitting
	// BlobTxs. Maelstrom will decode them, verify the signer and signature, extract the blobs and aggregate
	// them with others, eventually submitting them to the main chain
	BroadcastTx(ctx context.Context, in *BroadcastTxRequest, opts ...grpc.CallOption) (*BroadcastTxResponse, error)
}

type cosmosClient struct {
	cc grpc.ClientConnInterface
}

func NewCosmosClient(cc grpc.ClientConnInterface) CosmosClient {
	return &cosmosClient{cc}
}

func (c *cosmosClient) BroadcastTx(ctx context.Context, in *BroadcastTxRequest, opts ...grpc.CallOption) (*BroadcastTxResponse, error) {
	out := new(BroadcastTxResponse)
	err := c.cc.Invoke(ctx, Cosmos_BroadcastTx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CosmosServer is the server API for Cosmos service.
// All implementations must embed UnimplementedCosmosServer
// for forward compatibility
type CosmosServer interface {
	// BroadcastTx mimics the gRPC endpoint for the Cosmos SDK's tx service. This allows easier compatibility
	// for clients. They can simply redirect their endpoint to the Maelstrom service and continue submitting
	// BlobTxs. Maelstrom will decode them, verify the signer and signature, extract the blobs and aggregate
	// them with others, eventually submitting them to the main chain
	BroadcastTx(context.Context, *BroadcastTxRequest) (*BroadcastTxResponse, error)
	mustEmbedUnimplementedCosmosServer()
}

// UnimplementedCosmosServer must be embedded to have forward compatible implementations.
type UnimplementedCosmosServer struct {
}

func (UnimplementedCosmosServer) BroadcastTx(context.Context, *BroadcastTxRequest) (*BroadcastTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastTx not implemented")
}
func (UnimplementedCosmosServer) mustEmbedUnimplementedCosmosServer() {}

// UnsafeCosmosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CosmosServer will
// result in compilation errors.
type UnsafeCosmosServer interface {
	mustEmbedUnimplementedCosmosServer()
}

func RegisterCosmosServer(s grpc.ServiceRegistrar, srv CosmosServer) {
	s.RegisterService(&Cosmos_ServiceDesc, srv)
}

func _Cosmos_BroadcastTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosmosServer).BroadcastTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cosmos_BroadcastTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosmosServer).BroadcastTx(ctx, req.(*BroadcastTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cosmos_ServiceDesc is the grpc.ServiceDesc for Cosmos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cosmos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "maelstrom.v1.Cosmos",
	HandlerType: (*CosmosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadcastTx",
			Handler:    _Cosmos_BroadcastTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maelstrom/v1/cosmos.proto",
}
