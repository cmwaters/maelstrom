syntax = "proto3";

package maelstrom.v1;

import "google/api/annotations.proto";
import "cosmos/base/abci/v1beta1/abci.proto";

option go_package = "github.com/cmwaters/maelstrom";

service Maelstrom {
    // Info
    rpc Info(InfoRequest) returns (InfoResponse) {
        option (google.api.http) = { get: "/v1/info" };
    }
    // Submit
    rpc Submit(SubmitRequest) returns (SubmitResponse) {
        option (google.api.http) = { post: "/v1/submit", body: "*" };
    }
    // Status
    rpc Status(StatusRequest) returns (StatusResponse) {
        option (google.api.http) = { get: "/v1/status/{id}" };
    }
    // Balance
    rpc Balance(BalanceRequest) returns (BalanceResponse) {
        option (google.api.http) = { get: "/v1/balance/{address}" };
    }
    // Cancel
    rpc Cancel(CancelRequest) returns (CancelResponse) {
        option (google.api.http) = { post: "/v1/cancel", body: "*" };
    }
    // Withdraw
    rpc Withdraw(WithdrawRequest) returns (WithdrawResponse) {
        option (google.api.http) = { post: "/v1/withdraw", body: "*" };
    }
    // Pending Withdrawal
    rpc PendingWithdrawal(PendingWithdrawalRequest) returns (PendingWithdrawalResponse) {
        option (google.api.http) = { get: "/v1/pending_withdrawal/{address}" };
    }

    // BroadcastTx mimics the gRPC endpoint for the Cosmos SDK's tx service. This allows easier compatibility
    // for clients. They can simply redirect their endpoint to the Maelstrom service and continue submitting
    // BlobTxs. Maelstrom will decode them, verify the signer and signature, extract the blobs and aggregate
    // them with others, eventually submitting them to the main chain
    rpc BroadcastTx(BroadcastTxRequest) returns (BroadcastTxResponse) {
        option (google.api.http) = {
            post: "/cosmos/tx/v1beta1/txs"
            body: "*"
        };
    }

    // AccountInfo returns the sequence and account number of the account on Celestia.
    // It does this by proxying the request to the underlying consensus node.
    rpc AccountInfo(AccountInfoRequest) returns (AccountInfoResponse) {
        option (google.api.http) = {
            get: "/account_info/{address}"
        };
    }
}

message InfoRequest {}

message InfoResponse {
  string address = 1;
  uint64 height = 2;
  string chain_id = 3;
  double min_gas_price = 4;
}

message SubmitRequest {
    string signer = 1;
    bytes namespace = 2;
    repeated bytes blobs = 3;
    uint64 fee = 4;
    bytes signature = 5;
    Options options = 6;
}

message Options {
    uint64 timeout_blocks = 1;
    bool compact = 2;
    uint32 namespace_version = 3;
    uint32 share_version = 4;
}

message SubmitResponse {   
    uint64 id = 1;
}

message StatusRequest {
    uint64 id = 1;
}

message StatusResponse {
    enum Status {
        UNKNOWN = 0;
        PENDING = 1;
        BROADCASTING = 2;
        COMMITTED = 3;
        EXPIRED = 4;
    }
    Status status = 1;

    // If the tx is pending, these fields will be populated
    uint64 insert_height = 2;
    uint64 expiry_height = 3;

    // if the tx is committed, thid field will be populated
    bytes tx_hash = 4;
}

message BalanceRequest {
    string address = 1;
}

message BalanceResponse {
    uint64 maelstrom_balance = 1;
    uint64 celestia_balance = 2;
}

message CancelRequest {
    uint64 id = 1;
    bytes signature = 2;
}

message CancelResponse {}

message WithdrawRequest {
    string signer = 1;
    uint64 balance = 2;
    uint64 amount = 3;
    uint64 timestamp = 4;
    bytes signature = 5;
}

message WithdrawResponse {}

message PendingWithdrawalRequest {
    string address = 1;
}

message PendingWithdrawalResponse {
    uint64 amount = 1;
}

// BroadcastTxRequest matches the fields and types of the BroadcastTxRequest
// in the Cosmos SDK 
message BroadcastTxRequest {
	// tx_bytes is the raw transaction.
	bytes tx_bytes = 1;
    // broadcast mode (we ignore it for now)
	reserved 2;  
}

message BroadcastTxResponse {
    cosmos.base.abci.v1beta1.TxResponse tx_response = 1;
    // the ID is additional information and relates to the ID
    // used to track the status of the blob in maelstrom
    uint64 id = 2;
}

message AccountInfoRequest {
    string address = 1;
}

message AccountInfoResponse {
    uint64 account_number = 1;
    uint64 sequence = 2;
}